1.序列化
    1.1.什么是序列化和反序列化？
        序列化：将Java对象或基本类型数据用ObjectOutputStream写成成二进制序列的过程
        反序列化：将二进制序列用ObjectOutputStream读成Java对象或者基本类型数据的过程
        被称为序列化的原因正是每个对象都是用一个序列号保存的

    1.2.序列化通常的用途？
        1.将对象的字节序列永久保存到磁盘中。（持久化对象）
        2.在网络上传送对象的字节序列。（网络传输对象）

    1.3.序列化的使用
        1.由static和transient修饰的成员变量不能序列化。
        2.为了让某个类可以被序列化，必须实现Serializable或Externalizable中的一个。


3.BIO,NIO和AIO的区别
    BIO
        BIO为同步阻塞I/O模式（也称为传统IO）,基于流，指一个线程在执行I/O操作时，需要等待I/O操作的完成，程序才能继续执行，这段时间线程
    阻塞不能做其他事情，它的Socket通信通过Socket和ServerSocket实现，适用于低负载、低并发的情况。
        BIO Socket多线程模型传输简介：
            数据的收发通过socket获取输入输出流来完成，客户端通过socket来连接服务端,服务端则通过ServerSocket负责监听指定端口的
        连接请求，连接成功后，双方通过输入输出流进行通信。在数据的发送和接受过程中，双方调用SocketAPI读写的线程都会被阻塞，直到接受或
        发送完成。客户端发送请求后，服务端使用一个专门的Acceptor线程不断循环调用ServerSocket的accept()方法，来检查并接受新的连接,一
        旦有新的连接，该方法返回与这个连接相对应的Socket对象,Acceptor线程接着会创建一个处理线程，并将这个新的对象传递给这一个处理线程，
        并在之后由处理线程通过对Socket对象的读写与客户端进行通信。

        问题：
            1.单线程时，每次只能处理一个请求，只有当前请求处理完成才能处理下一个，无法并发处理多个请求。
            2.每建立一个连接就需要开启一个线程，而开启线程和线程的上下文切换非常消耗系统资源，并且服务器可开启的线程数量有限，因此，当
        客户数量大时，会开启大量线程，服务器压力太大，性能会很差。

        阻塞位置：accept(),read();

    NIO
        NIO为同步非阻塞模式。基于通道和缓冲区，在一个线程进行读操作时，总是只读当前可用的数据，当暂时没有数据时，就不执行，而不会阻塞等
    待。此时线程可以做其他事情，同样，写操作也不需要底层的I/O操作完成，其Socket通信通过SeverSocketChannel和SocketChannel实现，适用
    于高负载、高并发的情况。

        NIO模型简介：
            NIO包括三大部分Channel（通道）、Buffer（缓冲区）、Selector(多路复用器)。数据输入输出基于缓冲区和通道，服务端通过
        SeverSocketChannel将监听指定端口连接请求的任务事件注册到Selector中，客户端通过SocketChannel连接到服务端，并发送数据到服务端，
        服务端通过Selector多路复用器，阻塞轮询挑选需要进行处理的事件，并对事件进行同步处理。

        多路复用：
            在一个线程中处理多个读写请求
        通道：
            可以同时进行读写操作。
        解决问题：
            1.让accept()和read()不再阻塞
            2.实现单线程的并发问题
    AIO
        AIO，也称NIO2.0,是Java对于NIO的改进，主要是增加了异步非阻塞I/O的能力，它可以实现由操作系统完成I/O操作后主动通知调用者，即程
    序发起I/O操作后，可以做其他事情，无需阻塞，当操作完成后由操作系统将操作结果交给调用程序进行处理。


4.Java中的三种类型的Socket通信
    1.Socket和ServerSocket
    2.SocketChannel和ServerSocketChannel
    3.AsychronousSocketChannel和AsychronousServerSocketChannel









































            NIO的数据传输基于通道和缓冲区进行,数据总从通道
                                        读取到缓冲区,或者从缓冲区写入通道中。多路复用器

